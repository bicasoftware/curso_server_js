#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('server-curso-js:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port)
// server.on('error', onError)
// server.on('listening', onListening)

const models = require('../models')
const genHash = require('../utils/auth_helper').genHash

models.sequelize.sync().then(async function () {
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)

  const countUsers = await models.usuarios.count()
  const countPeriodos = await models.periodos.count()

  if (countUsers === 0 && countPeriodos === 0) {
    const usuario = await models.usuarios.create({
      email: 'email@test.com',
      password: await genHash('97674691')
    })

    const periodo = await models.periodos.create({
      presObrig: 70,
      aulasdia: 4,
      numperiodo: 1,
      inicio: '2019-06-12',
      termino: '2019-06-12',
      medaprov: 7.5,
      usuarioId: usuario.id
    })

    for (let i = 0; i < 4; i++) {
      await models.horarios.create({
        periodoId: periodo.id,
        ordemaula: i,
        inicio: '18:00',
        termino: '18:50'
      })
    }

    const materia = await models.materias.create({
      cor: 'F4F4F4',
      nome: 'MatemÃ¡tica',
      sigla: 'MAT',
      freq: 1,
      medaprov: periodo.medaprov,
      periodoId: periodo.id
    })

    for (let i = 0; i < 4; i++) {
      await models.aulas.create({
        materiaId: materia.id,
        weekday: 1,
        ordem: i
      })
    }

    await models.notas.create({
      materiaId: materia.id,
      data: '2019-08-12',
      nota: 0.0
    })

    for (let i = 0; i < 4; i++) {
      models.faltas.create({
        materiaId: materia.id,
        data: '2019-09-14',
        ordemAula: i
      })
    }
  }
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
